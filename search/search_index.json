{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Develop apps for MusicPimp using the JSON API. Requests Clients may interact with the MusicPimp server using HTTP requests and/or WebSocket connections. Obtain information using HTTP GET requests, and send JSON-formatted messages either in the body of HTTP POST requests or as WebSocket messages. To upload files, HTTP POST them as multipart/form-data . Media Types When making requests, indicate the desired response format in the Accept HTTP header. The JSON response formats are versioned, and in order to ensure API compatibility, clients should be explicit about which version of the format they accept. The following formats are currently valid: application/vnd.musicpimp.v18+json application/vnd.musicpimp.v17+json application/vnd.musicpimp+json application/json Remember this also when opening WebSocket connections; the value in the Accept header of the HTTP request that initiates a WebSocket connection will determine the format of the messages. Whenever backwards-incompatible changes are made to the JSON response format in future MusicPimp server updates, they will be made under a new version. However, new content (name/value pairs) may be added to an existing format without notice. The examples in this documentation are based on the latest format, application/vnd.musicpimp.v18+json . Note To force the server to respond with the latest JSON format regardless of the Accept header, append query parameter f=json to the request URL. Authentication HTTP Basic authentication is supported and required most of the time. Set your credentials in the Authorization HTTP header of the request. For example, if your username is i_love and password michael , the value of the Authorization header must be Basic aV9sb3ZlOm1pY2hhZWw= where aV9sb3ZlOm1pY2hhZWw= is i_love:michael base64-encoded. Responses The MusicPimp server responds to requests in either JSON (application/json) or HTML (text/html), depending on what the client has requested. Compression The responses are gzip-compressed provided that the Accept-Encoding HTTP header of the request contains gzip . Success and Failure A successful HTTP status code indicates that the request was processed successfully. The response of a failed request will have an HTTP status code indicating failure. In addition to the information you get from the status code, failed API requests may contain a JSON response content indicating the reason your request went titsup. Example: {\"reason\":\"Invalid parameter.\"}","title":"Develop"},{"location":"#requests","text":"Clients may interact with the MusicPimp server using HTTP requests and/or WebSocket connections. Obtain information using HTTP GET requests, and send JSON-formatted messages either in the body of HTTP POST requests or as WebSocket messages. To upload files, HTTP POST them as multipart/form-data .","title":"Requests "},{"location":"#media-types","text":"When making requests, indicate the desired response format in the Accept HTTP header. The JSON response formats are versioned, and in order to ensure API compatibility, clients should be explicit about which version of the format they accept. The following formats are currently valid: application/vnd.musicpimp.v18+json application/vnd.musicpimp.v17+json application/vnd.musicpimp+json application/json Remember this also when opening WebSocket connections; the value in the Accept header of the HTTP request that initiates a WebSocket connection will determine the format of the messages. Whenever backwards-incompatible changes are made to the JSON response format in future MusicPimp server updates, they will be made under a new version. However, new content (name/value pairs) may be added to an existing format without notice. The examples in this documentation are based on the latest format, application/vnd.musicpimp.v18+json . Note To force the server to respond with the latest JSON format regardless of the Accept header, append query parameter f=json to the request URL.","title":"Media Types"},{"location":"#authentication","text":"HTTP Basic authentication is supported and required most of the time. Set your credentials in the Authorization HTTP header of the request. For example, if your username is i_love and password michael , the value of the Authorization header must be Basic aV9sb3ZlOm1pY2hhZWw= where aV9sb3ZlOm1pY2hhZWw= is i_love:michael base64-encoded.","title":"Authentication"},{"location":"#responses","text":"The MusicPimp server responds to requests in either JSON (application/json) or HTML (text/html), depending on what the client has requested.","title":"Responses "},{"location":"#compression","text":"The responses are gzip-compressed provided that the Accept-Encoding HTTP header of the request contains gzip .","title":"Compression"},{"location":"#success-and-failure","text":"A successful HTTP status code indicates that the request was processed successfully. The response of a failed request will have an HTTP status code indicating failure. In addition to the information you get from the status code, failed API requests may contain a JSON response content indicating the reason your request went titsup. Example: {\"reason\":\"Invalid parameter.\"}","title":"Success and Failure"},{"location":"code-samples/","text":"As an example, let's use the API to ping a locally installed MusicPimp server and validate our credentials. We make a request and expect to get an HTTP response with status code 200 OK . Here's how it can be done in Scala, using either Apache HttpClient or the Web Services library in Play Framework : Here's the same in C#, using either Microsoft HTTP Client Libraries (HttpClient) or RestSharp :","title":"Code Samples"},{"location":"http-endpoints/","text":"HTTP requests are made using URLs like http://my_server_ip:8456/playback Library Library folders contain audio tracks and subfolders. Use the following methods to browse and retrieve items from the library. Get root folder GET /folders Returns the contents of the root folder of the music library. Example response: { \"folders\":[ { \"id\":\"100+Hits+-+Dance+Mix\", \"title\":\"100 Hits - Dance Mix\", \"path\":\"100 Hits - Dance Mix\" }, { \"id\":\"22+Pistepirkko\", \"title\":\"22 Pistepirkko\", \"path\":\"22 Pistepirkko\" }, { \"id\":\"2pac\", \"title\":\"2pac\", \"path\":\"2pac\" }, { \"id\":\"3+Doors+Down\", \"title\":\"3 Doors Down\", \"path\":\"3 Doors Down\" } ], \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] } Get subfolder GET /folders/my_folder_id_here Returns the contents of the specified music library folder. Note First request the contents of the root folder in order to get a list of subfolders for further browsing. Get track GET /tracks/my_track_id Retrieves the file with the specified ID. Supply this to a media player that accepts a URI as media source, for example. Get track, with Accept-Ranges GET /downloads/my_track_id The same as above except that the HTTP response contains the string bytes in the Accept-Ranges header. Search GET /search?term=tillbaka+till+samtiden&limit=100 Search for a track, album or artist. Specify your search query in the term query parameter, and optionally set the maximum number of returned results in the limit query parameter. Example response: [ { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 } ] Get most popular tracks GET /player/popular Returns an array (in key populars ) of the most played tracks along with the playback count (in key playbackCount ) of each track: { \"populars\": [ { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, \"playbackCount\": 42 }, { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 }, \"playbackCount\": 41 } ] } Get most recently played tracks GET /player/recent Returns an array (in key recents ) of the most recently played tracks, starting from the most recently played track, along with a timestamp (in key when , given in unix time in milliseconds) when playback started: { \"recents\": [ { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, \"when\": 1462812430364 }, { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 }, \"when\": 1462812422540 } ] } Player Control playback on the MusicPimp server using WebSockets or HTTP POST calls. To use the MusicPimp server as the playback device, open a WebSocket connection to /ws/playback or HTTP POST to /playback . The available commands are described below. Play track HTTP POST or WebSocket Start playback of the track with the given ID using the following HTTP request body or WebSocket message: {\"cmd\": \"play\", \"track\": \"my_track_id\"} Note Browse the music library to obtain IDs of available tracks. If the track you wish to play is not located on the MusicPimp server, see the next item instead. Play all Reset the playlist with the given tracks and start playback from the first track: { \"cmd\": \"play_items\", \"folders\": [ \"folder_id1\", \"folder_id2\" ], \"tracks\": [ \"track_id1\", \"track_id2\" ] } Play uploaded file POST to /playback/uploads Starts playback of the file uploaded as multipart/form-data . Stop playback HTTP POST or WebSocket Stop playback: {\"cmd\": \"stop\"} Resume playback HTTP POST or WebSocket Resume playback: {\"cmd\": \"resume\"} Next Start playback of the next track in the playlist: {\"cmd\": \"next\"} Previous Start playback of the previous track in the playlist: {\"cmd\": \"prev\"} Skip HTTP POST or WebSocket Start playback of the track at the specified playlist index: {\"cmd\": \"skip\", \"value\": 3} Seek HTTP POST or WebSocket Seek playback to the specified position, in seconds, of the current track: {\"cmd\": \"seek\", \"value\": 42} Adjust volume HTTP POST or WebSocket Adjust the volume, which is an integer in the range [0, 100]: {\"cmd\": \"volume\", \"value\": 42} Mute and unmute HTTP POST or WebSocket Turn mute on or off (true/false): {\"cmd\": \"mute\", \"value\": true} Status GET /playback Returns a server player status message. Example response: { \"track\": { \"id\": \"Paola+-+Interstellar+Love.mp3\", \"title\": \"Interstellar Love\", \"artist\": \"Paola\", \"album\": \"Stockcity Girl\", \"duration\": 201, \"size\": 4840094 }, \"state\": \"Started\", \"position\": 14, \"volume\": 40, \"mute\": false, \"playlist\": [ { \"id\": \"Paola+-+Interstellar+Love.mp3\", \"title\": \"Interstellar Love\", \"artist\": \"Paola\", \"album\": \"Stockcity Girl\", \"duration\": 201, \"size\": 4840094 }, { \"id\": \"cheap+trick+-+hello+there.mp3\", \"title\": \"Hello There\", \"artist\": \"Cheap Trick\", \"album\": \"The Essential Cheap Trick\", \"duration\": 100, \"size\": 2573904 } ], \"playlist_index\": 0 } Upload library track POST to /playback/stream Instruct the MusicPimp server to perform a multipart/form-data upload of a track in its library to a remote destination. { \"track\": \"my_track_id\", \"uri\": \"destination_uri\", \"username\": \"destination_username\", \"password\": \"destination_password\" } The credentials will be put into the Authorization header of the upload request as if the destination required HTTP Basic authentication. Playlist Add HTTP POST or WebSocket Add the track with the specified ID to the playlist: {\"cmd\": \"add\", \"track\": \"my_track_id\"} Add all Add multiple items to the playlist: { \"cmd\": \"add_items\", \"folders\": [ \"folder_id1\", \"folder_id2\" ], \"tracks\": [ \"track_id1\", \"track_id2\" ] } Reset playlist Reset the playlist to the given tracks and set the index to index : { \"cmd\": \"reset_playlist\", \"tracks\": [ \"track_id1\", \"track_id2\" ], \"index\": 0 } Resetting the playlist does not start or stop playback. Add uploaded file POST to /playlist/uploads Add the file uploaded as multipart/form-data to the playlist. Remove HTTP POST or WebSocket Remove the track at the specified playlist index from the playlist: {\"cmd\": \"remove\", \"value\": 3} Insert track Insert the given track at the specified index in the playlist: {\"cmd\": \"insert\", \"track\": \"my_track_id\", \"index\": 42} Move track in playlist Move the track at index from in the playlist to index to : {\"cmd\": \"move\", \"from\": 42, \"to\": 43} Get saved playlists Saved playlists are user-specific. GET /playlists Returns an array of saved playlists for the logged in user: { \"playlists\": [ { \"id\": 42, \"name\": \"The best playlist ever\", \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] } ] } Get one saved playlist Get a playlist by ID: GET /playlists/42 Example response: { \"playlist\": { \"id\": 42, \"name\": \"The best playlist ever\", \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] } } Create or update a saved playlist POST /playlists Saves the playlist supplied in the JSON body of the request: { \"playlist\": { \"id\": 42, \"name\": \"My updated playlist\", \"tracks\": [ \"track_id1\", \"track_id2\" ] } } To create a new playlist, set the ID to null in the above JSON body: \"id\": null Returns the ID of the saved playlist in a JSON object: { \"id\": 42 } Delete a saved playlist Delete a playlist with a given ID: POST /playlists/delete/42 Returns HTTP 202 Accepted if deletion succeeds. Alarms Schedule tracks for playback on your MusicPimp server. Use this as an alarm clock, for example. Get alarms GET /alarms Returns an array of alarms configured on the MusicPimp server: [ { \"id\": \"d7e506f0-9c05-4253-8fff-13ef37b8b38c\", \"job\": { \"track\": \"Chicane%5C17-chicane_ft_moya_brennan-saltwater.mp3\" }, \"when\": { \"hour\": 6, \"minute\": 40, \"days\": [ \"fri\", \"wed\", \"mon\", \"thu\", \"tue\" ] }, \"enabled\": true } ] Control alarms POST /alarms To control alarms, HTTP POST a request body with JSON to the /alarms endpoint. Each JSON body must at least contain a cmd key and may contain other key-value pairs, as documented below. Save changes to an existing alarm: { \"cmd\": \"save\", \"ap\": { \"id\": \"d7e506f0-9c05-4253-8fff-13ef37b8b38c\", \"job\": { \"track\": \"Chicane%5C17-chicane_ft_moya_brennan-saltwater.mp3\" }, \"when\": { \"hour\": 6, \"minute\": 40, \"days\": [ \"fri\", \"wed\", \"mon\", \"thu\", \"tue\" ] }, \"enabled\": true } } To create a new alarm, POST a payload like above, but set the alarm id to null : \"id\": null MusicPimp will generate a suitable ID for the alarm. Delete an alarm: { \"cmd\": \"delete\", \"id\": \"alarm_id_here\" } Start alarm playback: { \"cmd\": \"start\", \"id\": \"alarm_id_here\" } Stop alarm playback: { \"cmd\": \"stop\" } You may opt-in to receive push notifications to your mobile device(s) when scheduled playback starts. You may use such a notification to stop playback. To opt-in, you must register your device for push notifications with MusicPimp: Register a Microsoft Push Notification Service (MPNS) device: { \"cmd\": \"push_add\", \"url\": \"mpns_device_url_here\", \"silent\": true, \"tag\": \"tag_identifier\" } Unregister an MPNS device: { \"cmd\": \"push_remove\", \"url\": \"mpns_device_url_here\" } or { \"cmd\": \"push_remove\", \"tag\": \"tag_identifier\" } Register an Android device using Google Cloud Messaging (GCM): { \"cmd\": \"gcm_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister a GCM device: { \"cmd\": \"gcm_remove\", \"id\": \"tag_identifier\" } Register an Android device using Amazon Device Messaging (ADM): { \"cmd\": \"adm_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister an ADM device: { \"cmd\": \"adm_remove\", \"id\": \"tag_identifier\" } Register an Apple Push Notification service (APNs) device: { \"cmd\": \"apns_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister an APNs device: { \"cmd\": \"apns_remove\", \"id\": \"tag_identifier\" } Supply a unique and static tag ID with your registrations. This is used to identify your device (as device tokens may change) and is included in the payload of every push notification so that devices can identify the source MusicPimp server. Miscellaneous Ping GET /ping Pings the server. Returns a 200 OK HTTP response on success. Note Ping is the only API call that does not require authentication. Authenticated ping GET /pingauth Pings the server and validates the supplied credentials. Responds with 200 OK and the server version as JSON content if the credentials are valid, and with 401 Unauthorized if authentication fails. Example response: {\"version\":\"1.8.0\"}","title":"Http Endpoints"},{"location":"http-endpoints/#library","text":"Library folders contain audio tracks and subfolders. Use the following methods to browse and retrieve items from the library.","title":"Library"},{"location":"http-endpoints/#get-root-folder","text":"GET /folders Returns the contents of the root folder of the music library. Example response: { \"folders\":[ { \"id\":\"100+Hits+-+Dance+Mix\", \"title\":\"100 Hits - Dance Mix\", \"path\":\"100 Hits - Dance Mix\" }, { \"id\":\"22+Pistepirkko\", \"title\":\"22 Pistepirkko\", \"path\":\"22 Pistepirkko\" }, { \"id\":\"2pac\", \"title\":\"2pac\", \"path\":\"2pac\" }, { \"id\":\"3+Doors+Down\", \"title\":\"3 Doors Down\", \"path\":\"3 Doors Down\" } ], \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] }","title":"Get root folder"},{"location":"http-endpoints/#get-subfolder","text":"GET /folders/my_folder_id_here Returns the contents of the specified music library folder. Note First request the contents of the root folder in order to get a list of subfolders for further browsing.","title":"Get subfolder"},{"location":"http-endpoints/#get-track","text":"GET /tracks/my_track_id Retrieves the file with the specified ID. Supply this to a media player that accepts a URI as media source, for example.","title":"Get track"},{"location":"http-endpoints/#get-track-with-accept-ranges","text":"GET /downloads/my_track_id The same as above except that the HTTP response contains the string bytes in the Accept-Ranges header.","title":"Get track, with Accept-Ranges"},{"location":"http-endpoints/#search","text":"GET /search?term=tillbaka+till+samtiden&limit=100 Search for a track, album or artist. Specify your search query in the term query parameter, and optionally set the maximum number of returned results in the limit query parameter. Example response: [ { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 } ]","title":"Search"},{"location":"http-endpoints/#get-most-popular-tracks","text":"GET /player/popular Returns an array (in key populars ) of the most played tracks along with the playback count (in key playbackCount ) of each track: { \"populars\": [ { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, \"playbackCount\": 42 }, { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 }, \"playbackCount\": 41 } ] }","title":"Get most popular tracks"},{"location":"http-endpoints/#get-most-recently-played-tracks","text":"GET /player/recent Returns an array (in key recents ) of the most recently played tracks, starting from the most recently played track, along with a timestamp (in key when , given in unix time in milliseconds) when playback started: { \"recents\": [ { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C01_kent-elefanter.mp3\", \"title\": \"Elefanter\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 321, \"size\": 7639850 }, \"when\": 1462812430364 }, { \"track\": { \"id\": \"Kent%5C2007+-+Tillbaka+Till+Samtiden%5C02_kent-berlin.mp3\", \"title\": \"Berlin\", \"artist\": \"Kent\", \"album\": \"Tillbaka Till Samtiden\", \"duration\": 276, \"size\": 7143257 }, \"when\": 1462812422540 } ] }","title":"Get most recently played tracks"},{"location":"http-endpoints/#player","text":"Control playback on the MusicPimp server using WebSockets or HTTP POST calls. To use the MusicPimp server as the playback device, open a WebSocket connection to /ws/playback or HTTP POST to /playback . The available commands are described below.","title":"Player"},{"location":"http-endpoints/#play-track-http-post-or-websocket","text":"Start playback of the track with the given ID using the following HTTP request body or WebSocket message: {\"cmd\": \"play\", \"track\": \"my_track_id\"} Note Browse the music library to obtain IDs of available tracks. If the track you wish to play is not located on the MusicPimp server, see the next item instead.","title":"Play track HTTP POST or WebSocket"},{"location":"http-endpoints/#play-all","text":"Reset the playlist with the given tracks and start playback from the first track: { \"cmd\": \"play_items\", \"folders\": [ \"folder_id1\", \"folder_id2\" ], \"tracks\": [ \"track_id1\", \"track_id2\" ] }","title":"Play all"},{"location":"http-endpoints/#play-uploaded-file-post-to-playbackuploads","text":"Starts playback of the file uploaded as multipart/form-data .","title":"Play uploaded file POST to /playback/uploads"},{"location":"http-endpoints/#stop-playback-http-post-or-websocket","text":"Stop playback: {\"cmd\": \"stop\"}","title":"Stop playback HTTP POST or WebSocket"},{"location":"http-endpoints/#resume-playback-http-post-or-websocket","text":"Resume playback: {\"cmd\": \"resume\"}","title":"Resume playback HTTP POST or WebSocket"},{"location":"http-endpoints/#next","text":"Start playback of the next track in the playlist: {\"cmd\": \"next\"}","title":"Next"},{"location":"http-endpoints/#previous","text":"Start playback of the previous track in the playlist: {\"cmd\": \"prev\"}","title":"Previous"},{"location":"http-endpoints/#skip-http-post-or-websocket","text":"Start playback of the track at the specified playlist index: {\"cmd\": \"skip\", \"value\": 3}","title":"Skip HTTP POST or WebSocket"},{"location":"http-endpoints/#seek-http-post-or-websocket","text":"Seek playback to the specified position, in seconds, of the current track: {\"cmd\": \"seek\", \"value\": 42}","title":"Seek HTTP POST or WebSocket"},{"location":"http-endpoints/#adjust-volume-http-post-or-websocket","text":"Adjust the volume, which is an integer in the range [0, 100]: {\"cmd\": \"volume\", \"value\": 42}","title":"Adjust volume HTTP POST or WebSocket"},{"location":"http-endpoints/#mute-and-unmute-http-post-or-websocket","text":"Turn mute on or off (true/false): {\"cmd\": \"mute\", \"value\": true}","title":"Mute and unmute HTTP POST or WebSocket"},{"location":"http-endpoints/#status","text":"GET /playback Returns a server player status message. Example response: { \"track\": { \"id\": \"Paola+-+Interstellar+Love.mp3\", \"title\": \"Interstellar Love\", \"artist\": \"Paola\", \"album\": \"Stockcity Girl\", \"duration\": 201, \"size\": 4840094 }, \"state\": \"Started\", \"position\": 14, \"volume\": 40, \"mute\": false, \"playlist\": [ { \"id\": \"Paola+-+Interstellar+Love.mp3\", \"title\": \"Interstellar Love\", \"artist\": \"Paola\", \"album\": \"Stockcity Girl\", \"duration\": 201, \"size\": 4840094 }, { \"id\": \"cheap+trick+-+hello+there.mp3\", \"title\": \"Hello There\", \"artist\": \"Cheap Trick\", \"album\": \"The Essential Cheap Trick\", \"duration\": 100, \"size\": 2573904 } ], \"playlist_index\": 0 }","title":"Status"},{"location":"http-endpoints/#upload-library-track-post-to-playbackstream","text":"Instruct the MusicPimp server to perform a multipart/form-data upload of a track in its library to a remote destination. { \"track\": \"my_track_id\", \"uri\": \"destination_uri\", \"username\": \"destination_username\", \"password\": \"destination_password\" } The credentials will be put into the Authorization header of the upload request as if the destination required HTTP Basic authentication.","title":"Upload library track POST to /playback/stream"},{"location":"http-endpoints/#playlist","text":"","title":"Playlist"},{"location":"http-endpoints/#add-http-post-or-websocket","text":"Add the track with the specified ID to the playlist: {\"cmd\": \"add\", \"track\": \"my_track_id\"}","title":"Add HTTP POST or WebSocket"},{"location":"http-endpoints/#add-all","text":"Add multiple items to the playlist: { \"cmd\": \"add_items\", \"folders\": [ \"folder_id1\", \"folder_id2\" ], \"tracks\": [ \"track_id1\", \"track_id2\" ] }","title":"Add all"},{"location":"http-endpoints/#reset-playlist","text":"Reset the playlist to the given tracks and set the index to index : { \"cmd\": \"reset_playlist\", \"tracks\": [ \"track_id1\", \"track_id2\" ], \"index\": 0 } Resetting the playlist does not start or stop playback.","title":"Reset playlist"},{"location":"http-endpoints/#add-uploaded-file-post-to-playlistuploads","text":"Add the file uploaded as multipart/form-data to the playlist.","title":"Add uploaded file POST to /playlist/uploads"},{"location":"http-endpoints/#remove-http-post-or-websocket","text":"Remove the track at the specified playlist index from the playlist: {\"cmd\": \"remove\", \"value\": 3}","title":"Remove HTTP POST or WebSocket"},{"location":"http-endpoints/#insert-track","text":"Insert the given track at the specified index in the playlist: {\"cmd\": \"insert\", \"track\": \"my_track_id\", \"index\": 42}","title":"Insert track"},{"location":"http-endpoints/#move-track-in-playlist","text":"Move the track at index from in the playlist to index to : {\"cmd\": \"move\", \"from\": 42, \"to\": 43}","title":"Move track in playlist"},{"location":"http-endpoints/#get-saved-playlists","text":"Saved playlists are user-specific. GET /playlists Returns an array of saved playlists for the logged in user: { \"playlists\": [ { \"id\": 42, \"name\": \"The best playlist ever\", \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] } ] }","title":"Get saved playlists"},{"location":"http-endpoints/#get-one-saved-playlist","text":"Get a playlist by ID: GET /playlists/42 Example response: { \"playlist\": { \"id\": 42, \"name\": \"The best playlist ever\", \"tracks\":[ { \"id\":\"00+-+Preludio+Obsesivo.mp3\", \"title\":\"Preludio Obsesivo\", \"artist\":\"Rata Blanca\", \"album\":\"Rata Blanca\", \"duration\":222, \"size\":3108553 }, { \"id\":\"00+-+Turn+Me+On.mp3\", \"title\":\"Turn Me On\", \"artist\":\"Kevin Lyttle\", \"album\":\"Summer In The City - Latin Party\", \"duration\":175, \"size\":4225234 }, { \"id\":\"A+Ha+-+Take+On+Me.mp3\", \"title\":\"Take On Me [October 1985]\", \"artist\":\"A-Ha\", \"album\":\"The Definitive Singles Collection 1984-2004\", \"duration\":227, \"size\":5470208 } ] } }","title":"Get one saved playlist"},{"location":"http-endpoints/#create-or-update-a-saved-playlist","text":"POST /playlists Saves the playlist supplied in the JSON body of the request: { \"playlist\": { \"id\": 42, \"name\": \"My updated playlist\", \"tracks\": [ \"track_id1\", \"track_id2\" ] } } To create a new playlist, set the ID to null in the above JSON body: \"id\": null Returns the ID of the saved playlist in a JSON object: { \"id\": 42 }","title":"Create or update a saved playlist"},{"location":"http-endpoints/#delete-a-saved-playlist","text":"Delete a playlist with a given ID: POST /playlists/delete/42 Returns HTTP 202 Accepted if deletion succeeds.","title":"Delete a saved playlist"},{"location":"http-endpoints/#alarms","text":"Schedule tracks for playback on your MusicPimp server. Use this as an alarm clock, for example.","title":"Alarms"},{"location":"http-endpoints/#get-alarms","text":"GET /alarms Returns an array of alarms configured on the MusicPimp server: [ { \"id\": \"d7e506f0-9c05-4253-8fff-13ef37b8b38c\", \"job\": { \"track\": \"Chicane%5C17-chicane_ft_moya_brennan-saltwater.mp3\" }, \"when\": { \"hour\": 6, \"minute\": 40, \"days\": [ \"fri\", \"wed\", \"mon\", \"thu\", \"tue\" ] }, \"enabled\": true } ]","title":"Get alarms"},{"location":"http-endpoints/#control-alarms","text":"POST /alarms To control alarms, HTTP POST a request body with JSON to the /alarms endpoint. Each JSON body must at least contain a cmd key and may contain other key-value pairs, as documented below. Save changes to an existing alarm: { \"cmd\": \"save\", \"ap\": { \"id\": \"d7e506f0-9c05-4253-8fff-13ef37b8b38c\", \"job\": { \"track\": \"Chicane%5C17-chicane_ft_moya_brennan-saltwater.mp3\" }, \"when\": { \"hour\": 6, \"minute\": 40, \"days\": [ \"fri\", \"wed\", \"mon\", \"thu\", \"tue\" ] }, \"enabled\": true } } To create a new alarm, POST a payload like above, but set the alarm id to null : \"id\": null MusicPimp will generate a suitable ID for the alarm. Delete an alarm: { \"cmd\": \"delete\", \"id\": \"alarm_id_here\" } Start alarm playback: { \"cmd\": \"start\", \"id\": \"alarm_id_here\" } Stop alarm playback: { \"cmd\": \"stop\" } You may opt-in to receive push notifications to your mobile device(s) when scheduled playback starts. You may use such a notification to stop playback. To opt-in, you must register your device for push notifications with MusicPimp: Register a Microsoft Push Notification Service (MPNS) device: { \"cmd\": \"push_add\", \"url\": \"mpns_device_url_here\", \"silent\": true, \"tag\": \"tag_identifier\" } Unregister an MPNS device: { \"cmd\": \"push_remove\", \"url\": \"mpns_device_url_here\" } or { \"cmd\": \"push_remove\", \"tag\": \"tag_identifier\" } Register an Android device using Google Cloud Messaging (GCM): { \"cmd\": \"gcm_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister a GCM device: { \"cmd\": \"gcm_remove\", \"id\": \"tag_identifier\" } Register an Android device using Amazon Device Messaging (ADM): { \"cmd\": \"adm_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister an ADM device: { \"cmd\": \"adm_remove\", \"id\": \"tag_identifier\" } Register an Apple Push Notification service (APNs) device: { \"cmd\": \"apns_add\", \"id\": \"device_token\", \"tag\": \"tag_identifier\" } Unregister an APNs device: { \"cmd\": \"apns_remove\", \"id\": \"tag_identifier\" } Supply a unique and static tag ID with your registrations. This is used to identify your device (as device tokens may change) and is included in the payload of every push notification so that devices can identify the source MusicPimp server.","title":"Control alarms"},{"location":"http-endpoints/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"http-endpoints/#ping","text":"GET /ping Pings the server. Returns a 200 OK HTTP response on success. Note Ping is the only API call that does not require authentication.","title":"Ping"},{"location":"http-endpoints/#authenticated-ping","text":"GET /pingauth Pings the server and validates the supplied credentials. Responds with 200 OK and the server version as JSON content if the credentials are valid, and with 401 Unauthorized if authentication fails. Example response: {\"version\":\"1.8.0\"}","title":"Authenticated ping"},{"location":"server-events/","text":"You can subscribe to server-side playback updates. This is useful when you want to display a player in your app even though playback happens on another device. To subscribe, open a WebSocket connection to /ws/playback on the MusicPimp server. Events The following events are sent by the server. Time updated Sent when playback has progressed in time. The playback position is given as an integer in seconds. Sent at least once per second during playback: {\"event\":\"time_updated\",\"position\":42} Track changed The player track has changed. { \"event\":\"track_changed\", \"track\":{ \"id\":\"Pearl+Jam+-+Man+Of+The+Hour.mp3\", \"title\":\"Man Of The Hour\", \"artist\":\"Pearl Jam\", \"album\":\"My Lost Dogs\", \"duration\":225, \"size\":5408768 } } The track size is reported in bytes. Playstate changed Sent when the playstate has changed. {\"event\":\"playstate_changed\",\"state\":\"Stopped\"} The playstate may be one of the following among others: Playing Paused Stopped NoMedia NoMedia implies that the player has no track set. Playlist modified The tracks in the playlist have been modified. A separate event exists for when the playlist index has changed; see the next item. { \"event\":\"playlist_modified\", \"playlist\":[ { \"id\":\"Pearl+Jam+-+Man+Of+The+Hour.mp3\", \"title\":\"Man Of The Hour\", \"artist\":\"Pearl Jam\", \"album\":\"My Lost Dogs\", \"duration\":225, \"size\":5408768 }, { \"id\":\"ryan+adams+-+desire.mp3\", \"title\":\"Desire\", \"artist\":\"Ryan Adams\", \"album\":\"48 Hours\", \"duration\":231, \"size\":5546654 } ] } Playlist index changed The player has skipped to a new song in the playlist. {\"event\":\"playlist_index_changed\",\"playlist_index\":42} Volume changed The volume has changed. The volume is an integer value within [0,100]. {\"event\":\"volume_changed\",\"volume\":42} Mute toggled Mute has been turned on or off. {\"event\":\"mute_toggled\",\"mute\":true}","title":"Server Events"},{"location":"server-events/#events","text":"The following events are sent by the server.","title":"Events"},{"location":"server-events/#time-updated","text":"Sent when playback has progressed in time. The playback position is given as an integer in seconds. Sent at least once per second during playback: {\"event\":\"time_updated\",\"position\":42}","title":"Time updated"},{"location":"server-events/#track-changed","text":"The player track has changed. { \"event\":\"track_changed\", \"track\":{ \"id\":\"Pearl+Jam+-+Man+Of+The+Hour.mp3\", \"title\":\"Man Of The Hour\", \"artist\":\"Pearl Jam\", \"album\":\"My Lost Dogs\", \"duration\":225, \"size\":5408768 } } The track size is reported in bytes.","title":"Track changed"},{"location":"server-events/#playstate-changed","text":"Sent when the playstate has changed. {\"event\":\"playstate_changed\",\"state\":\"Stopped\"} The playstate may be one of the following among others: Playing Paused Stopped NoMedia NoMedia implies that the player has no track set.","title":"Playstate changed"},{"location":"server-events/#playlist-modified","text":"The tracks in the playlist have been modified. A separate event exists for when the playlist index has changed; see the next item. { \"event\":\"playlist_modified\", \"playlist\":[ { \"id\":\"Pearl+Jam+-+Man+Of+The+Hour.mp3\", \"title\":\"Man Of The Hour\", \"artist\":\"Pearl Jam\", \"album\":\"My Lost Dogs\", \"duration\":225, \"size\":5408768 }, { \"id\":\"ryan+adams+-+desire.mp3\", \"title\":\"Desire\", \"artist\":\"Ryan Adams\", \"album\":\"48 Hours\", \"duration\":231, \"size\":5546654 } ] }","title":"Playlist modified"},{"location":"server-events/#playlist-index-changed","text":"The player has skipped to a new song in the playlist. {\"event\":\"playlist_index_changed\",\"playlist_index\":42}","title":"Playlist index changed"},{"location":"server-events/#volume-changed","text":"The volume has changed. The volume is an integer value within [0,100]. {\"event\":\"volume_changed\",\"volume\":42}","title":"Volume changed"},{"location":"server-events/#mute-toggled","text":"Mute has been turned on or off. {\"event\":\"mute_toggled\",\"mute\":true}","title":"Mute toggled"}]}